// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  username     String    @unique
  email        String    @unique
  passwordHash String
  createdAt    DateTime  @default(now())
  lists        List[]
  reviews      Review[]
  activities   Activity[]
  followers    Follow[]  @relation("Followed", references: [id])
  following    Follow[]  @relation("Follower", references: [id])
}

model List {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  title       String
  contentType String
  items       Json
  createdAt   DateTime @default(now())
}

model Follow {
  id          String   @id @default(uuid())
  follower    User     @relation("Follower", fields: [followerId], references: [id])
  followerId  String
  followed    User     @relation("Followed", fields: [followedId], references: [id])
  followedId  String
  createdAt   DateTime @default(now())
}

model Activity {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  actionType  String
  contentId   String
  timestamp   DateTime @default(now())
}

model Review {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  contentId   String
  rating      Int
  comment     String
  createdAt   DateTime @default(now())
}
